#! /usr/bin/env node
 // -*- js -*-

// Command line interface tool sets based on Pu.

var pu = require(__dirname + "/../pu.js");
var path = require("path");
var fs = require("fs");

try {
	if (process.argv.length <= 2) {
		// Show help
		pu.log("\n Usage: pu [group] [action] [param1 (usually the input file)] [param2] ...\n");
	} else {
		var params = process.argv.slice(2);
		var group = params.shift().toLowerCase();
		var action = null;
		if (params.length > 0)
			action = params.shift().toLowerCase();
		// Show Version
		if (group == "version" || group == "-v" || group == "--version") {
			pu.log("v" + pu.version);
		}

		/* ------------------------------------ */

		// CSV file helpers
		else if (group == "csv" || group == "c") {
			var input = null,
				inputPath = absPath(params[0]);
			try {
				input = pu.csv(fs.readFileSync(inputPath).toString());
			} catch (e) {
				pu.log(e);
			}
			if (input != null) {

				// Slice columns
				if (action == "slice" || action == "sub" || action == "s") {
					var start = 0,
						end = undefined;
					if (params[1])
						start = parseInt(params[1]);
					if (params[2])
						end = parseInt(params[2]);
					for (var i = 0; i < input.length; i++)
						input[i] = input[i].slice(start, end);
					var outputPath = inputPath.substr(0, inputPath.lastIndexOf('.')) + "-sub.csv";
					try {
						pu.write(outputPath, input);
						pu.log("Sub CSV saved to '" + outputPath + "'!", true);
					} catch (e) {
						pu.log(e);
					}
				}
				// Transpose
				else if (action == "transpose" || action == "rotate" || action == "t") {
					var t = [];
					for (var i = 0; i < input.length; i++) {
						var l = input[i];
						for (var j = 0; j < l.length; j++) {
							if (t[j] == undefined)
								t[j] = [];
							t[j].push(l[j]);
						}
					}
					var outputPath = inputPath.substr(0, inputPath.lastIndexOf('.')) + "-transpose.csv";
					try {
						pu.write(outputPath, t);
						pu.log("Transpose CSV saved to '" + outputPath + "'!", true);
					} catch (e) {
						pu.log(e);
					}
				}
				// Swap columns
				else if (action == "swap" || action == "w") {
					var from = 0,
						to = 0;
					if (params[1])
						from = parseInt(params[1]);
					if (params[2])
						to = parseInt(params[2]);
					for (var i = 0; i < input.length; i++) {
						var temp = input[i][to];
						input[i][to] = input[i][from];
						input[i][from] = temp;
					}
					var outputPath = inputPath.substr(0, inputPath.lastIndexOf('.')) + "-swap.csv";
					try {
						pu.write(outputPath, input);
						pu.log("Swapped CSV saved to '" + outputPath + "'!", true);
					} catch (e) {
						pu.log(e);
					}
				} else
					errorLog(2, group, action);
			}
		}

		/* ------------------------------------ */

		// Files
		else if (group == "file" || group == "f") {
			var A = null,
				B = null,
				aPath = absPath(params[0]),
				bPath = absPath(params[1]);
			try {
				A = fs.readFileSync(aPath);
				B = fs.readFileSync(bPath);
			} catch (e) {
				pu.log(e)
			}
			if (A && B) {
				// Diff for no dup plain text lists
				if (action == "diff" || action == "differ" || action == "d") {
					var aLines = A.toString().split('\n');
					delete A;
					var bLines = B.toString().split('\n');
					delete B;
					var aFlags = Object.create(null),
						bFlags = Object.create(null);
					for (var i = 0; i < aLines.length; i++) {
						var l = aLines[i];
						if (l.length > 0)
							aFlags[l] = false;
					}
					for (var j = 0; j < bLines.length; j++) {
						var l = bLines[j];
						if (l.length > 0) {
							if (aFlags[l] === undefined)
								bFlags[l] = true;
							else
								aFlags[l] = true;
						}
					}
					delete aLines;
					delete bLines;
					var common = "",
						aOnly = "";
					for (var k in aFlags) {
						if (aFlags[k] == true)
							common += k + "\n";
						else
							aOnly += k + "\n";
					}
					delete aFlags;
					pu.write("PU_DIFF_COMMON.txt", common);
					pu.write("PU_DIFF_ONLY_" + aPath.split('/').pop() + ".txt", aOnly);
					delete common;
					delete aOnly;
					var bOnly = "";
					for (var k in bFlags) {
						bOnly += k + "\n";
					}
					delete bFlags;
					pu.write("PU_DIFF_ONLY_" + bPath.split('/').pop() + ".txt", bOnly);
					delete bOnly;
				}
				// Merge text files
				else if (action == "merge" || action == "m") {
					var fn = "PU_MERGE_" + params.length + "_FILES.txt";
					var buffer = A.toString().replace(/^\n+|\n+$/gi, "");
					fs.appendFileSync(fn, buffer);
					buffer = B.toString().replace(/^\n+|\n+$/gi, "");
					fs.appendFileSync(fn, "\n" + buffer);
					for (var i = 2; i < params.length; i++) {
						buffer = fs.readFileSync(absPath(params[i])).toString().replace(/^\n+|\n+$/gi, "");
						fs.appendFileSync(fn, "\n" + buffer);
					}
					pu.log("Merged " + params.length + " files into '" + fn + "'!", true);
				} else
					errorLog(2, group, action);
			}
		}

		/* ------------------------------------ */
		else if (group == "share" || group == "server") {
			if (action == "all" || action == "root" || action == "static") {
				var port = 80;
				if (params[1] && isNaN(parseInt(params[1])) == false)
					port = parseInt(params[1]);
				if (params[0] == undefined)
					params[0] = '.';
				var aPath = absPath(params[0]);
				var app = pu.app(aPath, aPath);
				var server = pu.server(port, app);
				var ips = pu.ip();
				pu.log("Visit '" + ips.ipv4.external + ":" + port + "' to access files under '" + aPath + "'.", true);
			} else if (action == "file" || action == "one") {
				var port = 80;
				if (params[1] && isNaN(parseInt(params[1])) == false)
					port = parseInt(params[1]);
				var aPath = absPath(params[0]);
				var app = pu.app();
				app.get('/', function(req, res) {
					res.download(aPath);
				});
				var server = pu.server(port, app);
				var ips = pu.ip();
				pu.log("Visit '" + ips.ipv4.external + ":" + port + "' to download '" + aPath + "'.", true);
			} else
				errorLog(2, group, action);
		}

		/* ------------------------------------ */

		// Text file helpers
		else if (group == "text" || group == "txt" || group == "t") {
			var input = null,
				inputPath = absPath(params[0]);
			try {
				input = fs.readFileSync(inputPath).toString();
			} catch (e) {
				pu.log(e);
			}
			if (input != null) {

				// Case convert
				if (action == "case" || action == "c") {
					var flag = "lower"
					if (params[1] == "high" || params[1] == "up" || params[1] == "upper" || params[1] == "A" || params[1] == "1") {
						flag = "upper";
						input = input.toUpperCase();
					} else
						input = input.toLowerCase();
					var segs = inputPath.split('.');
					var type = segs.pop();
					var outputPath = segs.join('.') + "-" + flag + "." + type;
					try {
						pu.write(outputPath, input);
						pu.log("Converted to " + flag + " case, saved to '" + outputPath + "'!", true);
					} catch (e) {
						pu.log(e);
					}
				}
				// Trim
				else if (action == "trim" || action == "t" || action == "compact") {
					input = input.replace(/\n\s+/gi, "\n").replace(/\s+\n/gi, "\n").replace(/\n+/gi, "\n").replace(/^\n+|\n+$/gi, "");
					var segs = inputPath.split('.');
					var type = segs.pop();
					var outputPath = segs.join('.') + "-trim." + type;
					try {
						pu.write(outputPath, input);
						pu.log("Trimmed file saved to '" + outputPath + "'!", true);
					} catch (e) {
						pu.log(e);
					}
				} else
					errorLog(2, group, action);
			}
		}

		/* ------------------------------------ */
		else if (group == "code" || group == "codes") {

			// Template
			if (action == "template" || action == "temp" || action == "t" || action == "new") {
				if (params.length == 0 || params[0] == "server" || params[0] == "web" || params[0] == "ws") {
					pu.mkdir("public");
					pu.write("pu-server.js", "var pu = require('pu');\npu.tid('pu-server');\npu.fork(function(wid){\n	var app = pu.app(__dirname + '/public');\n	app.get('/',function(req,res){\n		res.send('Handled by worker #' + wid)\n	});\n	pu.notfound(app,'/');\n	var server = pu.server(1337,app);\n});");
					pu.log("Created 'pu-server.js' and the 'public' directory.", true);
				} else
					pu.log("Unknown template type!", true);
			}
			// Line count
			else if (action == "line" || action == "lines" || action == "l") {
				if (params.length > 0) {
					var root = params.shift();
					var files = pu.walk(absPath(root));
					var all = true,
						types = Object.create(null),
						total = 0,
						totalFiles = 0,
						fileTypes = Object.create(null);
					for (var i = 0; i < params.length; i++) {
						all = false;
						if (params[i][0] == '.')
							params[i] = params[i].substr(1);
						types[params[i]] = 0;
					}
					if (all == true)
						pu.log("Counting any type of files...", true);
					else
						pu.log("Counting only " + params.join(' | '), true);
					for (var j = 0; j < files.length; j++) {
						var f = files[j];
						var t = f.substr(f.lastIndexOf('.') + 1);
						if (all == true && types[t] == undefined)
							types[t] = 0;
						if (all == true || types[t] != undefined) {
							var len = fs.readFileSync(f).toString().split('\n').length;
							total += len;
							types[t] += len;
							totalFiles++;
							if (fileTypes[t] == undefined)
								fileTypes[t] = 0;
							fileTypes[t] ++;
						}
					}
					for (var k in types)
						pu.log("." + k + ": " + types[k] + " lines in " + fileTypes[k] + " files;", true);
					pu.log("TOTAL: " + total + " lines in " + totalFiles + " files.", true);
				} else
					pu.log("Please provide project root!", true);
			} else {
				var input = null,
					inputPath = absPath(params[0]);
				try {
					input = fs.readFileSync(inputPath).toString();
				} catch (e) {
					pu.log(e);
				}
				if (input != null) {

					// Minify
					if (action == "minify" || action == "compress" || action == "min" || action == "m") {
						var segs = inputPath.split('.');
						var type = segs.pop();
						if (params[1])
							type = params[1].toLowerCase();
						if (type == "javascript")
							type = "js";
						var outputPath = segs.join('.') + ".min." + type;
						if (type == "js" || type == "html" || type == "css") {
							try {
								pu.write(outputPath, pu.minify(input, type));
								pu.log("Minified code saved to '" + outputPath + "'!", true);
							} catch (e) {
								pu.log(e);
							}
						} else
							pu.log("Minify only supports .js .html and .css!", true);
					} else
						errorLog(2, group, action);
				}
			}
		}

		/* ------------------------------------ */

		// Time and Timers
		else if (group == "time" || group == "timer" || group == "watch" || group == "clock") {

			// Stopwatch with lap time
			if (action == "stopwatch" || action == "watch" || action == "lap" || action == "s") {
				var start = new Date(),
					lap = start,
					count = 0;
				pu.log("Stopwatch started!", true);
				pu.log("Hit enter to check duration and interval, type 'end' to end.", true);
				process.stdin.resume();
				process.stdin.on('data', function(chunk) {
					if (chunk == "stop\n" || chunk == "end\n" || chunk == "exit\n")
						process.stdin.end();
					else {
						count++;
						var now = new Date();
						pu.log("#" + count + ": " + pu.interval(now - start) + " since start, " + pu.interval(now - lap) + " since last time.", true);
						lap = now;
					}
				});
			}
			// Execute a command
			else if (action == "exec" || action == "benchmark") {
				var exec = require("child_process").exec;
				var cmd = params.join(" ");
				pu.log("Executed command: '" + cmd + "' ...", true);
				var start = new Date()
				exec(cmd, function(error, stdout, stderr) {
					var now = new Date();
					pu.log("Finished in " + pu.interval(now - start), true);
				});
			}
			// Tick / Counter
			else if (action == "tick" || action == "count" || action == "counter") {
				var interval = 1000,
					count = 0;
				if (params[0] != undefined)
					interval = parseFloat(params[0]) * interval;
				pu.log("0 (interval = " + interval / 1000 + "s)", true);
				setInterval(function() {
					count++;
					pu.log(count, true);
				}, interval);
			}
			// Just print the current time
			else
				pu.log(pu.time());
		} else {
			errorLog(1, group);
		}
	}
} catch (err) {
	pu.log("[ERROR] Wrong argv format, please check your inputs!", true);
}

/* ------------------------------------ */

// Utils

function errorLog(type, arg1, arg2) {
	if (type == 1)
		pu.log("[ERROR] Can't find group '" + arg1 + "'!", true);
	else if (type == 2)
		pu.log("[ERROR] Can't find action '" + arg2 + "' in group '" + arg1 + "'!", true);
	else
		pu.log("[ERROR] Unknown error!", true);
}

function absPath(p) {
	return path.resolve('.', p);
}