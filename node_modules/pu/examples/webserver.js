var pu = require("../pu.js");

// Set title id in 'ps'
pu.tid("pu example");

// Fork [cpus] workers
pu.fork(function(workerID) {
	// The first callback is the worker logic, fires on all worker processes ...

	// New express app (cleaned default response header), with public root set as '__dirname' (remember to change this !!!)
	var app = pu.app(__dirname);
	app.get('/', function(req, res) {

		// Log worker id with timestamp
		pu.log("Handled by worker #" + workerID, true);

		// Send the help doc
		res.header("Content-Type", "text/txt");
		res.send(pu.help(true))
	});

	// Redirect all 404 to '/'
	pu.notfound(app, '/');

	// Listen on port 1337
	var server = pu.server(1337, app);

	if (workerID == 2) {
		// Worker #2 send event 'hi' to master (id=0) and wait for reply
		pu.tell(0, 'hi', 'hello workers!');
		pu.heard('reply', function(data, senderID) {
			pu.log("Worker #" + workerID + " heard '" + data + "' from master", true);
		});
	} else if (workerID == 3) {
		// Worker #3 broadcasts event 'foobar' with a JSON data to all workers (and master)
		pu.shout('foobar', {
			"foo": "bar"
		});
	} else {
		// Bind events to get the broadcast data and the sender ID 
		pu.heard('foobar', function(data, senderID) {
			pu.log("Worker #" + workerID + " heard '" + pu.pretty(data) + "' from worker #" + senderID, true);
		});
	}
}, function() {
	// Execute on master (optional) ...
	pu.log("I'm the master!", true);
	pu.heard('hi', function(data, senderID) {
		pu.log("Master heard '" + data + "' from worker #" + senderID, true);
		pu.shout('reply', 'thanks!');
	});
});