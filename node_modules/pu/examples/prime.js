// 2.8s on my Macbook Pro (8 cores)
var pu = require("../pu.js");

// Fork workers
pu.fork(
	// Workers
	function(workerId, totalWorkers) {
		var range = Math.floor(8000000 / totalWorkers),
			start = (workerId - 1) * range,
			primes = 0;
		for (var i = start; i < start + range; i++) {
			if (isPrime(i))
				primes++;
		}
		// Send result back to master (id=0)
		pu.tell(0, 'end', primes);
	},
	// Master (master logic is optional)
	function(totalWorkers) {
		var counter = 0,
			primes = 0;
		// Collect all results from workers
		pu.heard('end', function(data, senderId) {
			primes += data;
			if (++counter == totalWorkers)
				pu.log(primes);
		});
	});


/*
// 10.3s on my Macbook Pro (8 cores)
var pu = require("../pu.js");
var primes = 0;
for(var i=0;i<8000000;i++){
	if(isPrime(i))
		primes++;
}
pu.log(primes)
*/

// Simple prime number check
function isPrime(num) {
	if (num < 2)
		return false;
	else {
		var max = Math.sqrt(num);
		for (var i = 2; i <= max; i++) {
			if (num % i == 0)
				return false;
		}
		return true;
	}
}